#!/usr/bin/emacs --script

(setq make-backup-files nil)

(require 'org)
(setq org-export-show-temporary-export-buffer nil)
(setq org-html-htmlize-output-type nil)
(setq org-html-head-include-default-style nil)
(setq org-html-postamble nil)
(setq org-export-with-toc nil)
(setq org-html-doctype "html5")
(setq org-export-with-section-numbers nil)
(setq org-export-with-statistics-cookies nil)

(require 'ox)

(defun name->html-id (name)
  (downcase (replace-in-string " " "_" name)))

(defun replace-in-string (what with in)
  (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

(defun wrap-literate-ref-in-link (html-source)
  (replace-regexp-in-string "&lt;&lt.+&gt;&gt;"
                            (lambda (match)
                              (format "<a href=#%s>%s</a>" (name->html-id (substring match 8 -8)) match))
                            html-source))

(defun personal-site-org-html-src-block (src-block _contents info)
  "Transcode a SRC-BLOCK element from Org to HTML. CONTENTS holds the contents of the item.
INFO is a plist holding contextual information."
  (if (org-export-read-attribute :attr_html src-block :textarea)
      (org-html--textarea-block src-block)
    (let* ((lang (org-element-property :language src-block))
	   (code (org-html-format-code src-block info))
           (name (org-element-property :name src-block))
	   (label (if name
                      (format " id=\"%s\"" (name->html-id name))
                    (let ((lbl (org-export-get-reference src-block info)))
		      (if lbl (format " id=\"%s\"" lbl) "")))))
      (if (not lang)
          (format "<p>%s</p><pre class=\"example\"%s>\n%s</pre>" name label code)
	(format "<div class=\"org-src-container\">%s%s\n<div class=\"scroll\"><div class=\"anchor\"></div></div></div>"
		;; Build caption.
		(let ((caption (org-export-get-caption src-block)))
		  (if (not caption) ""
		    (let ((listing-number
			   (format
			    "<span class=\"listing-number\">%s </span>"
			    (format
			     (org-html--translate "Listing %d:" info)
			     (org-export-get-ordinal
			      src-block info nil #'org-html--has-caption-p)))))
		      (format "<label class=\"org-src-name\">%s%s</label>"
			      listing-number
			      (org-trim (org-export-data caption info))))))
		;; Contents.
		(format "<pre class=\"src src-%s\"%s><span class=\"personal-site-org-src-name\">%s</span>%s</pre>"
                        lang label (if name (format "&lt&lt%s&gt&gt=\n\n" name) "")
                        (wrap-literate-ref-in-link code)))))))

;; Add <div> around <pre> like how it is done for source blocks.
(defun personal-site-org-html-example-block (example-block _contents info)
  "Transcode a EXAMPLE-BLOCK element from Org to HTML.
CONTENTS is nil.  INFO is a plist holding contextual
information."
  (let ((attributes (org-export-read-attribute :attr_html example-block)))
    (if (plist-get attributes :textarea)
	(org-html--textarea-block example-block)
      (format "<div class=\"example-container\"> <pre class=\"example\"%s>\n%s</pre></div>"
	      (let* ((name (org-element-property :name example-block))
		     (a (org-html--make-attribute-string
			 (if (or (not name) (plist-member attributes :id))
			     attributes
			   (plist-put attributes :id name)))))
		(if (org-string-nw-p a) (concat " " a) ""))
	      (org-html-format-code example-block info)))))

(defvar personal-site-literate-links nil)

(defun create-literate-block-links (backend)
  "Make a pass through the file to save information needed to create hyperlinks during src-block expansion."
  (setq personal-site-literate-links
        (let ((info (org-element-parse-buffer)))
          (org-element-map info 'src-block
            (lambda (src-block)
              (let* ((name (org-element-property :name src-block))
                     (id (if name (name->html-id name) nil)))
                (if name
                    (cons name id)
                  nil)))))))

(add-hook 'org-export-before-parsing-hook 'create-literate-block-links)

(org-export-define-derived-backend 'personal-site-html 'html :translate-alist '((src-block . personal-site-org-html-src-block)
                                                                                (example-block . personal-site-org-html-example-block)))

(defun personal-site-org-html-export-as-html
    (&optional async subtreep visible-only body-only ext-plist)
  (interactive)
  (org-export-to-buffer 'personal-site-html "*Org PERSONAL-SITE-HTML Export*"
    async subtreep visible-only body-only ext-plist
    (lambda () (html-mode))))

(defconst +org-export-buffer+ "*Org PERSONAL-SITE-HTML Export*")

(defun html-body-id-filter (output backend info)
  "Remove random ID attributes generated by Org."
  (when (eq backend 'personal-site-html)
    (replace-regexp-in-string
     " id=\"[[:alpha:]-]*org[[:alnum:]]\\{7\\}\""
     ""
     output t)))
(add-to-list 'org-export-filter-final-output-functions 'html-body-id-filter)

(defun directory-org-files (dir)
  (cl-remove-if (lambda (x) (not (equal (url-file-extension x) ".org"))) (directory-files dir)))

(defun org-to-html (in-file out-file)
  "Converts the contents of an Org file IN-FILE into an HTML file OUT-FILE."
  (with-temp-buffer
    (insert-file-contents in-file)
    (personal-site-org-html-export-as-html nil nil nil t))
  (set-buffer +org-export-buffer+)
  (write-file out-file)
  (kill-buffer))

(let* ((in-dir (car command-line-args-left))
       (out-dir (cadr command-line-args-left)))
  (unless (and (stringp in-dir) (stringp out-dir))
    (error "Requires two command line arguments, and input directory and an output directory."))
  (let* ((org-files (directory-org-files in-dir))
         (html-files (mapcar (lambda (x) (string-join (list (string-trim-right x ".org") ".html"))) org-files))
         (org-full-paths (mapcar (lambda (x) (string-join (list in-dir x) "/")) org-files))
         (html-full-paths (mapcar (lambda (x) (string-join (list out-dir x) "/")) html-files)))
    (cl-loop for org-full-path in org-full-paths for html-full-path in html-full-paths do
             (org-to-html org-full-path html-full-path))))
